import { NativeConnection, Worker } from '@temporalio/worker';

async function run() {
  const address = process.env.TEMPORAL_ADDRESS!;
  const namespace = process.env.TEMPORAL_NAMESPACE!;
  const apiKey = process.env.TEMPORAL_API_KEY!;
  const taskQueue = process.env.TEMPORAL_TASK_QUEUE || 'sms-orchestrator';

  if (!address || !namespace || !apiKey) {
    throw new Error('Missing TEMPORAL_ADDRESS / TEMPORAL_NAMESPACE / TEMPORAL_API_KEY');
  }

  // Temporal Cloud connection (gRPC) with API Key
  const connection = await NativeConnection.connect({
    address,
    tls: {}, // Cloud requires TLS
    // If your SDK supports `auth`, use:
    // auth: { type: 'apiKey', apiKey },
    // Otherwise, use headers:
    metadata: { authorization: `Bearer ${apiKey}` },
  });

  const worker = await Worker.create({
    connection,
    namespace,
    taskQueue,
    // This file is auto-generated by the SDK bundler during start-up
    workflowsPath: require.resolve('./workflows'),
    activities: require('./activities'),
  });

  console.log(`ðŸ‘· Worker starting on queue "${taskQueue}" (ns: ${namespace}, addr: ${address})`);
  await worker.run();
}

run().catch((err) => {
  console.error('Worker failed:', err);
  process.exit(1);
});
